import{_ as e,p as a,q as i,a1 as o}from"./framework-5866ffd3.js";const r={},n=o('<h1 id="defensive-programming" tabindex="-1"><a class="header-anchor" href="#defensive-programming" aria-hidden="true">#</a> Defensive Programming</h1><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><p>http://teaching.csse.uwa.edu.au/units/CITS1001/handouts/L14-defensive-programming.pdf</p><h2 id="rules-on-how-to-employ-defensive-programming-in-your-codebase" tabindex="-1"><a class="header-anchor" href="#rules-on-how-to-employ-defensive-programming-in-your-codebase" aria-hidden="true">#</a> Rules on how to employ Defensive Programming in your codebase:</h2><ol><li><p>Protect your code from invalid data coming from outside, wherever you decide outside is. External systems, files, or any call from outside of the module/component. Establish “trust boundaries” — everything outside of the boundary is dangerous, everything inside of the boundary is safe. In the barricade code, validate all input data.</p></li><li><p>After you have checked for bad data, decide how to handle it. <strong>Defensive Programming is NOT about swallowing errors or hiding bugs.</strong> Choose a strategy to deal with bad data: return an error and stop right away (fast fail), return a neutral value, substitute data values… Make sure that the strategy is clear and consistent.</p></li><li><p>Don’t assume that a function call or method call outside of your code will work as advertised. Make sure that you understand and test error handling around external APIs and libraries.</p></li><li><p>Use assertions to document assumptions and to highlight “impossible” conditions. This is especially important in large systems that have been maintained by different people over time, or in high-reliability code.</p></li><li><p>Add diagnostic code, logging and tracing intelligently to help explain what’s going on at run-time, especially if you run into a problem.</p></li><li><p>Standardize error handling. Decide how to handle “normal errors” or “expected errors” and warnings, and do all of this consistently.</p></li></ol>',5),t=[n];function s(d,l){return a(),i("div",null,t)}const c=e(r,[["render",s],["__file","defensive-programming.html.vue"]]);export{c as default};
