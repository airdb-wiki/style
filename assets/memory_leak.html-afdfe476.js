import{_ as r,M as i,p as o,q as t,R as e,t as s,N as a,a1 as l}from"./framework-5866ffd3.js";const c={},d={href:"https://mp.weixin.qq.com/s/4Vn1Rq82wOFiLdEmjXU0fw",target:"_blank",rel:"noopener noreferrer"},p=l(`<h1 id="memory-leaking-scenarios" tabindex="-1"><a class="header-anchor" href="#memory-leaking-scenarios" aria-hidden="true">#</a> Memory Leaking Scenarios</h1><h2 id="gin-pprof" tabindex="-1"><a class="header-anchor" href="#gin-pprof" aria-hidden="true">#</a> Gin pprof</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">import </span><span style="color:#CE9178;">&quot;github.com/gin-contrib/pprof&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">pprof.Register(router)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="case-sets" tabindex="-1"><a class="header-anchor" href="#case-sets" aria-hidden="true">#</a> Case Sets</h2><p>Case1: https://github.com/golang/go/issues/25484</p><p>yes, the way used by strings.Builder, is a more efficient way.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">func ByteSlice2String(bs []byte) string {
	return *(*string)(unsafe.Pointer(&amp;bs))
}
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),h={href:"https://golang.org/src/strings/builder.go#L45",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"https://www.openmymind.net/Go-Slices-And-The-Case-Of-The-Missing-Memory/",-1);function u(g,f){const n=i("ExternalLinkIcon");return o(),t("div",null,[e("p",null,[e("a",d,[s("go pprof与线上事故：一次成功的定位与失败的复现"),a(n)])]),p,e("p",null,[s("For reference, "),e("a",h,[s("this is the source referred to"),a(n)])]),m])}const b=r(c,[["render",u],["__file","memory_leak.html.vue"]]);export{b as default};
